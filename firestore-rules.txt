// Firestore Security Rules for movie-catalog project
// Copy these to Firebase Console > Firestore Database > Rules

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for security
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      // NextAuth ile credential-based auth kullandığımız için 
      // admin kontrolü backend'de yapılıyor
      // Firestore'da sadece authenticated user kontrolü yapıyoruz
      return isAuthenticated();
    }
    
    function isValidMovieData() {
      return request.resource.data.keys().hasAll(['title', 'year', 'director', 'hardDrive']) &&
             request.resource.data.title is string &&
             request.resource.data.title.size() > 0 &&
             request.resource.data.year is number &&
             request.resource.data.year > 1800 &&
             request.resource.data.year <= 2030 &&
             request.resource.data.director is string &&
             request.resource.data.director.size() > 0 &&
             request.resource.data.hardDrive is string &&
             request.resource.data.hardDrive.size() > 0;
    }
    
    function hasValidTimestamps() {
      return request.time == request.resource.data.updatedAt;
    }
    
    // Movies collection - public read, admin-only write with validation
    match /movies/{movieId} {
      allow read: if true; // Public read access for catalog browsing
      
      allow create: if isAdmin() && 
                       isValidMovieData() &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time;
                       
      allow update: if isAdmin() && 
                       isValidMovieData() &&
                       hasValidTimestamps() &&
                       resource.data.createdAt == request.resource.data.createdAt;
                       
      allow delete: if isAdmin();
    }
    
    // Admin logs collection (for audit trail)
    match /admin_logs/{logId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated() &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.timestamp == request.time;
    }
    
    // Rate limiting collection (to track API usage)
    match /rate_limits/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Default deny all other collections and documents
    match /{document=**} {
      allow read, write: if false;
    }
  }
}